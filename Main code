#Python code for Multiple Color Detection


import numpy as np
import pandas as pd
import cv2

x=input("Enter 1 to use upload image or Enter 2 to use camera:")
if x=="1":
        img = cv2.imread("color_image.jpg")
        index=["color", "color_name", "hex", "R", "G", "B"]
        csv = pd.read_csv('colors.csv', names=index, header=None)
        clicked = False
        r = g = b = x1 = y1 = 0

        def recognize_color(R,G,B):
            minimum = 10000
            for i in range(len(csv)):
                d = abs(R- int(csv.loc[i,"R"])) + abs(G- int(csv.loc[i,"G"]))+ abs(B- int(csv.loc[i,"B"]))
                if(d<=minimum):
                    minimum = d
                    name = csv.loc[i,"color_name"]#Accessing rows and columns
            return name

        def mouseclick(event, x, y, flags, param):
            if event == cv2.EVENT_LBUTTONDBLCLK:
                global b,g,r,x1,y1, clicked
                clicked = True
                x1 = x
                y1 = y
                b,g,r = img[y,x]
                b = int(b)
                g = int(g)
                r = int(r)
        cv2.namedWindow('Color Recognition App')
        cv2.setMouseCallback('Color Recognition App', mouseclick)
        while(1):
            cv2.imshow("Color Recognition App",img)
            if (clicked):
                #cv2.rectangle(image, startpoint, endpoint, color, thickness)-1 fills entire rectangle 
                cv2.rectangle(img,(20,20), (750,60), (b,g,r), -1)
        #Creating text string to display( Color name and RGB values )
                text = recognize_color(r,g,b)
                
                #cv2.putText(img,text,start,font(0-7),fontScale,color,thickness,lineType )
                cv2.putText(img, text,(50,50),2,0.8,(0,0,0),2,cv2.LINE_AA)
                    
                clicked=False
                #Break the loop when user hits 'esc' key    
            if cv2.waitKey(20) & 0xFF ==27:
                break
        cv2.destroyAllWindows()
elif x=="2":
    # Capturing video through webcam
        webcam = cv2.VideoCapture(0)

        # Start a while loop
        while(1):
                
                # Reading the video from the
                # webcam in image frames
                _, i = webcam.read()

                # Convert the imageFrame in
                # BGR(RGB color space) to
                # HSV(hue-saturation-value)
                # color space
                h = cv2.cvtColor(i, cv2.COLOR_BGR2HSV)

                # Set range for red color and
                # define mask
                red_lower = np.array([136, 87, 111], np.uint8)#No.s between 0-255
                red_upper = np.array([180, 255, 255], np.uint8)
                red_mask = cv2.inRange(h, red_lower, red_upper)

                # Set range for green color and
                # define mask
                green_lower = np.array([25, 52, 72], np.uint8)
                green_upper = np.array([102, 255, 255], np.uint8)
                green_mask = cv2.inRange(h, green_lower, green_upper)

                # Set range for blue color and
                # define mask
                blue_lower = np.array([94, 80, 2], np.uint8)
                blue_upper = np.array([120, 255, 255], np.uint8)
                blue_mask = cv2.inRange(h, blue_lower, blue_upper)

                # Morphological Transform, Dilation
                # for each color and bitwise_and operator
                # between imageFrame and mask determines
                # to detect only that particular color
                k = np.ones((5, 5), "uint8")#Masking an area
                
                # For red color
                red_mask = cv2.dilate(red_mask, k)
                res_red = cv2.bitwise_and(i, i,mask = red_mask)
                
                # For green color
                green_mask = cv2.dilate(green_mask, k)
                res_green = cv2.bitwise_and(i, i,mask = green_mask)
                
                # For blue color
                blue_mask = cv2.dilate(blue_mask, k)
                res_blue = cv2.bitwise_and(i, i,mask = blue_mask)

                # Creating contour to track red color
                contours, hierarchy = cv2.findContours(red_mask,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
                
                for pic, contour in enumerate(contours):
                        area = cv2.contourArea(contour)
                        if(area > 300):
                                x, y, w, h = cv2.boundingRect(contour)#create an approximate rectangle in the place of colour
                                i = cv2.rectangle(i, (x, y),(x + w, y + h),(0, 0, 255), 2)
                                
                                cv2.putText(i, "Red Colour", (x, y),
                                                        cv2.FONT_HERSHEY_PLAIN, 1.0,
                                                        (0, 0, 255))	

                # Creating contour to track green color
                contours, hierarchy = cv2.findContours(green_mask,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
                
                for pic, contour in enumerate(contours):
                        area = cv2.contourArea(contour)
                        if(area > 300):
                                x, y, w, h = cv2.boundingRect(contour)
                                i = cv2.rectangle(i, (x, y),(x + w, y + h),(0, 255, 0), 2)
                                
                                cv2.putText(i, "Green Colour", (x, y),
                                                        cv2.FONT_HERSHEY_PLAIN,
                                                        1.0, (0, 255, 0))

                # Creating contour to track blue color
                contours, hierarchy = cv2.findContours(blue_mask,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
                for pic, contour in enumerate(contours):
                        area = cv2.contourArea(contour)
                        if(area > 300):
                                x, y, w, h = cv2.boundingRect(contour)
                                i = cv2.rectangle(i, (x, y),(x + w, y + h),(255, 0, 0), 2)
                                
                                cv2.putText(i, "Blue Colour", (x, y),
                                                        cv2.FONT_HERSHEY_PLAIN,
                                                        1.0, (255, 0, 0))
                                
                # Program Termination
                cv2.imshow("Multiple Color Detection in Real-TIme", i)
                if cv2.waitKey(20) & 0xFF == 27:
                        break
        cv2.destroyAllWindows()
else:
        print("Please enter only 1 or 2")
